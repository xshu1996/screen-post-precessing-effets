// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: 
          value: white
        noiseTex: 
          value: white
        alphaThreshold:
          value: 0.5
        u_edgetWidth:
          value: 0.05
        u_burnColOuter: 
          value:
            - 0.604
            - 0.996
            - 1.000
            - 1.000
          inspector: 
              type: color
        u_burnColInner:
          value:
            - 1.000
            - 1.000
            - 1.000
            - 1.000
          inspector: 
              type: color
        u_startPoint:
          value:
            - 0.5
            - 0.5
        u_disEffect:
          value:
            - 0.737
        u_speed:
          value:
            - 1.0
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_NOISE_TEXTURE
  uniform sampler2D noiseTex;
  #endif

  #if USE_FIXED_POINT
  uniform u_fixedPoint
  {
    vec2 u_startPoint;
    float u_disEffect;
  };
  #endif

  uniform u_constant
  {
    vec4 u_burnColInner;
    vec4 u_burnColOuter;
    float u_edgetWidth;
    float u_speed;
  };

  vec3 lerp(vec3 a, vec3 b, float t) {
    return a + (b - a) * t;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    vec4 nc = vec4(1.0);

    #if USE_NOISE_TEXTURE
      nc = texture2D(noiseTex, v_uv0);
    #endif

    float delta = 1.0;
    #if USE_FIXED_POINT
      float dis = distance(u_startPoint, v_uv0);
      vec4 noiseColor = texture2D(noiseTex, v_uv0);
      float cutout = noiseColor.r * dis * (1.0 - u_disEffect) + dis * u_disEffect;
      float threshold = abs(sin(cc_time.x * u_speed));
      delta = cutout - threshold;
    #else
      // 阈值计算
      float noiseThreshold = fract(cc_time.x * u_speed);
      delta = nc.r - noiseThreshold;
    #endif

    float t = smoothstep(0.0, u_edgetWidth, delta);
    vec3 burnColor = mix(u_burnColOuter.rgb, u_burnColInner.rgb, t);
    o.rgb = mix(burnColor.rgb, o.rgb, t);
    o.a *= step(0.0, delta);

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
