// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        amplitude: { value: 0.05 }
        angularVelocity: { value: 10.0 }
        frequency: { value: 10.0 }
        offset: { value: 0.5 }
        u_alpha: { value: 0.1 }
        uRotated: { value: 0.0 }
        uUVOffset:
          value:
            - 0.0 
            - 0.0
            - 1.0
            - 1.0
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform u_constant {
    vec4 uUVOffset;
    float amplitude;        // 振幅
    float angularVelocity;  // 角速度
    float frequency;        // 频率
    float offset;           // 偏距
    float u_alpha;          // 进度条未完成区域透明度
    float uRotated;
  };

  // 把图集内的图片的 uv 坐标换算映射到 0.0 ～ 1.0 或者反之
  float linear(float x0, float x1, float y0, float y1, float inputX) 
  {
     return (y1 - y0) * (inputX - x0) / (x1 - x0) + y0;
  }

  // 图片是否旋转
  vec2 rotateVec (vec2 uv) 
  {
      if (uRotated > 0.5)
      {
          float tmp = uv.x;
          uv.x = uv.y;
          uv.y = 1.0 - tmp;
      }
      return uv;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    float initiaPhase = frequency * cc_time.x;
    // 将合图里面的 uv 映射到 [0~1]
    float u = linear(uUVOffset.x, uUVOffset.z, 0.0, 1.0, v_uv0.x);
    float v = linear(uUVOffset.y, uUVOffset.w, 0.0, 1.0, v_uv0.y);
    // 代入正弦曲线公式计算 y 值
    // y = Asin(ωx ± φt) + k
    float y = amplitude * sin(angularVelocity * u + initiaPhase) + 1.0 - offset;
    // 进度其余的部分 降低透明度 区别显示区域
    o.a *= clamp(step(y, v) + u_alpha, 0.0, 1.0);

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
