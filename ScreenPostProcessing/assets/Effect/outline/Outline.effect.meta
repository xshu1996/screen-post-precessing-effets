{
  "ver": "1.0.27",
  "uuid": "9a7f153e-a8a9-4d14-aa2d-4dd65b164309",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 outlineColor;\nuniform float edge;\n#if USE_FIRE_OUTLINE\nuniform vec4 innerColor;\n#endif\nuniform vec4 uv_offset;\nuniform vec2 speed;\nuniform float is_rotated;\nvec2 normalizedUV(vec2 uv)\n{\n  vec2 UVnormalize;\n  UVnormalize.x = (uv.x - uv_offset.x) / (uv_offset.z - uv_offset.x);\n  UVnormalize.y = (uv.y - uv_offset.y) / (uv_offset.w - uv_offset.y);\n  if (is_rotated > 0.5)\n  {\n    float temp = UVnormalize.x;\n    UVnormalize.x = UVnormalize.y;\n    UVnormalize.y = 1.0 - temp;\n  }\n  return UVnormalize;\n}\nvec4 getEdgeColor(vec2 uv, float edge, vec4 outlineColor)\n{\n  edge = edge / 100.0;\n  vec4 accum = vec4(0.0);\n  vec4 normal = texture2D(texture, uv);\n  accum += texture2D(texture, uv - edge);\n  accum += texture2D(texture, uv + edge);\n  accum += texture2D(texture, uv + vec2(-edge, edge));\n  accum += texture2D(texture, uv + vec2(edge, -edge));\n  accum += texture2D(texture, uv + vec2(0, -edge));\n  accum += texture2D(texture, uv + vec2(0, edge));\n  accum += texture2D(texture, uv + vec2(edge, 0));\n  accum += texture2D(texture, uv + vec2(-edge, 0));\n  accum.rgb = outlineColor.rgb;\n  return mix(accum, normal, normal.a);\n}\nvec4 magnifyTexture(vec2 uv, float edge, vec4 fillColor)\n{\n  edge = edge / 100.0;\n  vec4 accum = vec4(0.0);\n  accum += texture2D(texture, uv - edge);\n  accum += texture2D(texture, uv + edge);\n  accum += texture2D(texture, uv + vec2(-edge, edge));\n  accum += texture2D(texture, uv + vec2(edge, -edge));\n  accum += texture2D(texture, uv + vec2(0, -edge));\n  accum += texture2D(texture, uv + vec2(0, edge));\n  accum += texture2D(texture, uv + vec2(edge, 0));\n  accum += texture2D(texture, uv + vec2(-edge, 0));\n  accum.rgb = fillColor.rgb;\n  return accum;\n}\nfloat random (vec2 st) {\n  return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453123);\n}\nfloat noise (vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n    uv = normalizedUV(uv);\n    #if USE_FIRE_OUTLINE\n      vec4 normalColor = texture2D(texture, uv);\n      float time = cc_time.x;\n      vec2 offer = time * speed;\n      vec2 noiseSt = (0.5 * uv + offer * 0.5) * 100.0;\n      vec2 noiseSt2 = (0.8 * uv + offer) * 100.0;\n      float noiseColor = noise(noiseSt) - 0.5;\n      float noiseColor2 = noise(noiseSt2) - 0.5;\n      vec4 fire1 = magnifyTexture(uv + vec2(0.0, noiseColor * 0.03), edge * 2.0, outlineColor);\n      vec4 fire2 = magnifyTexture(uv + vec2(0.0, noiseColor2 * 0.015), edge, innerColor);\n      vec4 fireColor = mix(fire1, fire2, fire2.a);\n      o = mix(fireColor, normalColor, normalColor.a);\n    #else\n      o = getEdgeColor(uv, edge, outlineColor);\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  vec4 outlineColor;\n  float edge;\n};\n#if USE_FIRE_OUTLINE\nuniform FireParam\n{\n  vec4 innerColor;\n};\n#endif\nuniform UVInfo {\n  vec4 uv_offset;\n  vec2 speed;\n  float is_rotated;\n};\nvec2 normalizedUV(vec2 uv)\n{\n  vec2 UVnormalize;\n  UVnormalize.x = (uv.x - uv_offset.x) / (uv_offset.z - uv_offset.x);\n  UVnormalize.y = (uv.y - uv_offset.y) / (uv_offset.w - uv_offset.y);\n  if (is_rotated > 0.5)\n  {\n    float temp = UVnormalize.x;\n    UVnormalize.x = UVnormalize.y;\n    UVnormalize.y = 1.0 - temp;\n  }\n  return UVnormalize;\n}\nvec4 getEdgeColor(vec2 uv, float edge, vec4 outlineColor)\n{\n  edge = edge / 100.0;\n  vec4 accum = vec4(0.0);\n  vec4 normal = texture2D(texture, uv);\n  accum += texture2D(texture, uv - edge);\n  accum += texture2D(texture, uv + edge);\n  accum += texture2D(texture, uv + vec2(-edge, edge));\n  accum += texture2D(texture, uv + vec2(edge, -edge));\n  accum += texture2D(texture, uv + vec2(0, -edge));\n  accum += texture2D(texture, uv + vec2(0, edge));\n  accum += texture2D(texture, uv + vec2(edge, 0));\n  accum += texture2D(texture, uv + vec2(-edge, 0));\n  accum.rgb = outlineColor.rgb;\n  return mix(accum, normal, normal.a);\n}\nvec4 magnifyTexture(vec2 uv, float edge, vec4 fillColor)\n{\n  edge = edge / 100.0;\n  vec4 accum = vec4(0.0);\n  accum += texture2D(texture, uv - edge);\n  accum += texture2D(texture, uv + edge);\n  accum += texture2D(texture, uv + vec2(-edge, edge));\n  accum += texture2D(texture, uv + vec2(edge, -edge));\n  accum += texture2D(texture, uv + vec2(0, -edge));\n  accum += texture2D(texture, uv + vec2(0, edge));\n  accum += texture2D(texture, uv + vec2(edge, 0));\n  accum += texture2D(texture, uv + vec2(-edge, 0));\n  accum.rgb = fillColor.rgb;\n  return accum;\n}\nfloat random (vec2 st) {\n  return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453123);\n}\nfloat noise (vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n    uv = normalizedUV(uv);\n    #if USE_FIRE_OUTLINE\n      vec4 normalColor = texture(texture, uv);\n      float time = cc_time.x;\n      vec2 offer = time * speed;\n      vec2 noiseSt = (0.5 * uv + offer * 0.5) * 100.0;\n      vec2 noiseSt2 = (0.8 * uv + offer) * 100.0;\n      float noiseColor = noise(noiseSt) - 0.5;\n      float noiseColor2 = noise(noiseSt2) - 0.5;\n      vec4 fire1 = magnifyTexture(uv + vec2(0.0, noiseColor * 0.03), edge * 2.0, outlineColor);\n      vec4 fire2 = magnifyTexture(uv + vec2(0.0, noiseColor2 * 0.015), edge, innerColor);\n      vec4 fireColor = mix(fire1, fire2, fire2.a);\n      o = mix(fireColor, normalColor, normalColor.a);\n    #else\n      o = getEdgeColor(uv, edge, outlineColor);\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}