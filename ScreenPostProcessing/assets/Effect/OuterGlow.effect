
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uIntensity: 
            value: 2.0
          uSize: 
            value: 0.5
          uGlowColor: 
            value: 
              - 0.604
              - 0.996
              - 1.000
              - 1.000
            inspector: 
              type: color
          uRotated:
            value: 0.0
          uUVOffset:
            value:
              - 0.0
              - 0.0
              - 1.0
              - 1.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
      vec4 uUVOffset;
      vec4 uGlowColor;
      float uIntensity;
      float uSize;
      float uRotated;
    };
	uniform sampler2D uTex;

  // 把图集内的图片的 uv 坐标换算映射到 0.0 ～ 1.0 或者反之
  float linear(float x0, float x1, float y0, float y1, float inputX) 
  {
     return (y1 - y0) * (inputX - x0) / (x1 - x0) + y0;
  }

  // 图片是否旋转
  vec2 rotateVec (vec2 uv) 
  {
      if (uRotated > 0.5)
      {
          float tmp = uv.x;
          uv.x = uv.y;
          uv.y = 1.0 - tmp;
      }
      return uv;
  }

    
	vec4 OuterGlow_main(sampler2D Tex, vec2 UV, float Intensity, float Size, vec4 GlowColor) 
	{
	    const int samplers = 8;
	    vec4 ret = vec4(0, 0, 0, 0);
	    float count = 0.0;
	    for (int iy = -samplers; iy < samplers; iy++)
	    {
	        for (int ix = -samplers; ix < samplers; ix++)
	        {
	            vec2 uv2 = vec2(ix, iy);
	            uv2 /= float(samplers);
	            uv2 *= Size * 0.1;
	            
              // 0 - 1 范围内的真实 uv
              vec2 r_uv = vec2(
                linear(uUVOffset.x, uUVOffset.z, 0.0, 1.0, UV.x),
                linear(uUVOffset.y, uUVOffset.w, 0.0, 1.0, UV.y)
              );
              r_uv = rotateVec(r_uv);

	            uv2 = clamp(r_uv + uv2, 0.0, 1.0);

              // recover 还原到图片的 uv 范围内
              uv2 = vec2(
                linear(0.0, 1.0, uUVOffset.x, uUVOffset.z, uv2.x),
                linear(0.0, 1.0, uUVOffset.y, uUVOffset.w, uv2.y)
              );
              uv2 = rotateVec(uv2);

	            ret += texture2D(Tex, uv2);
	            count++;
	        }
	    }
	    ret = mix(vec4(0, 0, 0, 0), ret / count, abs(sin(cc_time.x)) * Intensity);
	    ret.rgb = GlowColor.rgb;
	    vec4 col = texture2D(Tex, UV);
	    ret = mix(ret, col, col.a);
	    return ret;
	}
	    
	void main () {
	    gl_FragColor = OuterGlow_main(texture, v_uv0, uIntensity, uSize, uGlowColor);
	} 
	
}%
        