{
  "ver": "1.0.27",
  "uuid": "17969e2f-bb3e-4224-bfa7-88f46194a488",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst float PI = 3.1415926535897932384626433832795;\nfloat dot2(vec2 v)\n{\n  return dot(v, v);\n}\nfloat sdHeart(vec2 p)\n{\n    p.x = abs(p.x);\n    if (p.y + p.x > 1.0)\n    {\n      return sqrt(dot2(p - vec2(0.25, 0.75))) - sqrt(2.0) / 4.0;\n    }\n    return sqrt(min(dot2(p - vec2(0.00, 1.00)),\n                    dot2(p - 0.5 * max(p.x + p.y, 0.0)))) * sign(p.x - p.y);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 p = 2.0 * v_uv0 - 1.0;\n  p.y = 1.0 - p.y;\n  float iTime = cc_time.x;\n  vec2 si = vec2(0.9, 0.6) + 0.3 * cos(iTime + vec2(0, 2));\n  vec4 ra = 0.3 + 0.3 * cos( 2.0 * iTime + vec4(0, 1, 2, 3) );\n  ra = min(ra, min(si.x, si.y));\n  float d = 0.0;\n  float heratRate = 89.0 / 60.0;\n  float danceRange = 0.2;\n  float t = cc_time.x * PI;\n  d = sdHeart(p + vec2(0.0, -0.5)) + danceRange * fract(0.5 * sin(heratRate * t) + 0.5);\n  if (d > 0.0) discard;\n  vec3 col = (d > 0.0) ? vec3(0.9, 0.6, 0.3) : vec3(0.65,0.85,1.0);\n  col *= 1.0 - exp(-6.0 * abs(d));\n  col *= 0.8 + 0.2 * cos(150.0 * d);\n  col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n  o = vec4(col, 1.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant\n{\n  vec4 u_roundR;\n  vec2 u_rect;\n};\nconst float PI = 3.1415926535897932384626433832795;\nfloat dot2(vec2 v)\n{\n  return dot(v, v);\n}\nfloat sdHeart(vec2 p)\n{\n    p.x = abs(p.x);\n    if (p.y + p.x > 1.0)\n    {\n      return sqrt(dot2(p - vec2(0.25, 0.75))) - sqrt(2.0) / 4.0;\n    }\n    return sqrt(min(dot2(p - vec2(0.00, 1.00)),\n                    dot2(p - 0.5 * max(p.x + p.y, 0.0)))) * sign(p.x - p.y);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 p = 2.0 * v_uv0 - 1.0;\n  p.y = 1.0 - p.y;\n  float iTime = cc_time.x;\n  vec2 si = vec2(0.9, 0.6) + 0.3 * cos(iTime + vec2(0, 2));\n  vec4 ra = 0.3 + 0.3 * cos( 2.0 * iTime + vec4(0, 1, 2, 3) );\n  ra = min(ra, min(si.x, si.y));\n  float d = 0.0;\n  float heratRate = 89.0 / 60.0;\n  float danceRange = 0.2;\n  float t = cc_time.x * PI;\n  d = sdHeart(p + vec2(0.0, -0.5)) + danceRange * fract(0.5 * sin(heratRate * t) + 0.5);\n  if (d > 0.0) discard;\n  vec3 col = (d > 0.0) ? vec3(0.9, 0.6, 0.3) : vec3(0.65,0.85,1.0);\n  col *= 1.0 - exp(-6.0 * abs(d));\n  col *= 0.8 + 0.2 * cos(150.0 * d);\n  col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n  o = vec4(col, 1.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}