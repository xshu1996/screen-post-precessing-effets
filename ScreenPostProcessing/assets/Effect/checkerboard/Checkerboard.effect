CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        colorA: { value: [0.0, 0.0, 0.0, 1.0], editor: { type: color } }
        colorB: { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        _Frequency: { value: 5.0 }
        _Resolution: { value: [100.0, 100.0] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform _Constant
  {
    vec4 colorA;
    vec4 colorB;
    vec2 _Resolution;
    float _Frequency;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    // 适配分辨率，保证小格子始终为正方形
    vec2 ratio = vec2(
      max(1.0, _Resolution.x / _Resolution.y), 
      max(1.0, _Resolution.y / _Resolution.x)
    );
    vec2 uv = v_uv0;
    vec2 odd_even = floor(uv * _Frequency * ratio) / 2.0;
    float checker = 2.0 * fract(odd_even.x + odd_even.y);
    o = mix(colorA, colorB, checker);

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
