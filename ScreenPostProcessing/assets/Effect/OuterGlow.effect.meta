{
  "ver": "1.0.27",
  "uuid": "be877ec3-a67c-498a-b0a7-f874be3aa25b",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec4 uUVOffset;\nuniform vec4 uGlowColor;\nuniform float uIntensity;\nuniform float uSize;\nuniform float uRotated;\nuniform sampler2D uTex;\nfloat linear(float x0, float x1, float y0, float y1, float inputX)\n{\n   return (y1 - y0) * (inputX - x0) / (x1 - x0) + y0;\n}\nvec2 rotateVec(vec2 uv)\n{\n    if (uRotated > 0.5)\n    {\n        float tmp = uv.x;\n        uv.x = uv.y;\n        uv.y = 1.0 - tmp;\n    }\n    return uv;\n}\nvec2 reRotateVec(vec2 uv)\n{\n  if (uRotated > 0.5)\n    {\n        float tmp = 1.0 - uv.x;\n        uv.x = 1.0 - uv.y;\n        uv.y = 1.0 - tmp;\n    }\n    return uv;\n}\nvec4 OuterGlow_main(sampler2D Tex, vec2 UV, float Intensity, float Size, vec4 GlowColor)\n{\n    const int samplers = 8;\n    vec4 ret = vec4(0, 0, 0, 0);\n    float count = 0.0;\n    for (int iy = -samplers; iy < samplers; iy++)\n    {\n        for (int ix = -samplers; ix < samplers; ix++)\n        {\n            vec2 uv2 = vec2(ix, iy);\n            uv2 /= float(samplers);\n            uv2 *= Size * 0.1;\n            vec2 r_uv = vec2(\n              linear(uUVOffset.x, uUVOffset.z, 0.0, 1.0, UV.x),\n              linear(uUVOffset.y, uUVOffset.w, 0.0, 1.0, UV.y)\n            );\n            r_uv = rotateVec(r_uv);\n            uv2 = clamp(r_uv + uv2, 0.0, 1.0);\n            uv2 = vec2(\n              linear(0.0, 1.0, uUVOffset.x, uUVOffset.z, uv2.x),\n              linear(0.0, 1.0, uUVOffset.y, uUVOffset.w, uv2.y)\n            );\n            uv2 = reRotateVec(uv2);\n            ret += texture2D(Tex, uv2);\n            count++;\n        }\n    }\n    ret = mix(vec4(0, 0, 0, 0), ret / count, abs(sin(cc_time.x)) * Intensity);\n    ret.rgb = GlowColor.rgb;\n    vec4 col = texture2D(Tex, UV);\n    ret = mix(ret, col, col.a);\n    return ret;\n}\nvoid main () {\n    gl_FragColor = OuterGlow_main(texture, v_uv0, uIntensity, uSize, uGlowColor);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n    vec4 uUVOffset;\n    vec4 uGlowColor;\n    float uIntensity;\n    float uSize;\n    float uRotated;\n  };\nuniform sampler2D uTex;\nfloat linear(float x0, float x1, float y0, float y1, float inputX)\n{\n   return (y1 - y0) * (inputX - x0) / (x1 - x0) + y0;\n}\nvec2 rotateVec(vec2 uv)\n{\n    if (uRotated > 0.5)\n    {\n        float tmp = uv.x;\n        uv.x = uv.y;\n        uv.y = 1.0 - tmp;\n    }\n    return uv;\n}\nvec2 reRotateVec(vec2 uv)\n{\n  if (uRotated > 0.5)\n    {\n        float tmp = 1.0 - uv.x;\n        uv.x = 1.0 - uv.y;\n        uv.y = 1.0 - tmp;\n    }\n    return uv;\n}\nvec4 OuterGlow_main(sampler2D Tex, vec2 UV, float Intensity, float Size, vec4 GlowColor)\n{\n    const int samplers = 8;\n    vec4 ret = vec4(0, 0, 0, 0);\n    float count = 0.0;\n    for (int iy = -samplers; iy < samplers; iy++)\n    {\n        for (int ix = -samplers; ix < samplers; ix++)\n        {\n            vec2 uv2 = vec2(ix, iy);\n            uv2 /= float(samplers);\n            uv2 *= Size * 0.1;\n            vec2 r_uv = vec2(\n              linear(uUVOffset.x, uUVOffset.z, 0.0, 1.0, UV.x),\n              linear(uUVOffset.y, uUVOffset.w, 0.0, 1.0, UV.y)\n            );\n            r_uv = rotateVec(r_uv);\n            uv2 = clamp(r_uv + uv2, 0.0, 1.0);\n            uv2 = vec2(\n              linear(0.0, 1.0, uUVOffset.x, uUVOffset.z, uv2.x),\n              linear(0.0, 1.0, uUVOffset.y, uUVOffset.w, uv2.y)\n            );\n            uv2 = reRotateVec(uv2);\n            ret += texture2D(Tex, uv2);\n            count++;\n        }\n    }\n    ret = mix(vec4(0, 0, 0, 0), ret / count, abs(sin(cc_time.x)) * Intensity);\n    ret.rgb = GlowColor.rgb;\n    vec4 col = texture2D(Tex, UV);\n    ret = mix(ret, col, col.a);\n    return ret;\n}\nvoid main () {\n    gl_FragColor = OuterGlow_main(texture, v_uv0, uIntensity, uSize, uGlowColor);\n}"
      }
    }
  ],
  "subMetas": {}
}