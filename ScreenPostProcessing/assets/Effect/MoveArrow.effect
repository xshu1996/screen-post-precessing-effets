
/**
 * @author: shux
 * @date: 2021-12-9 11:13:54
 * @description: 图片需要设置为平铺模式
 */

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        m_speed: { value: 0.5 }
        m_bgCol: 
          value: 
            - 0.0
            - 0.0
            - 0.0
            - 0.0
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Constant {
    vec4 m_bgCol;
    float m_speed;
  }; 

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    float positive = 1.0;
    #if NEED_REVERSE
      positive = -positive;
    #endif

    vec2 uv = vec2(fract(v_uv0.x - positive * m_speed * cc_time.x), v_uv0.y);

    #if NEED_REVERSE
      uv.x = 1.0 - uv.x;
    #endif

    #if USE_TEXTURE
      CCTexture(texture, uv, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif

    gl_FragColor = mix(gl_FragColor, m_bgCol, step(o.a, 0.02));
  }
}%
