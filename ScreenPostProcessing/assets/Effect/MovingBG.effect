CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec2 a_uv0;
  in vec2 a_uv1;
  in vec2 a_uv2;
  in vec2 a_uv3;

  out vec2 v_uv0;
  out vec2 v_uv1;
  out vec2 v_uv2;
  out vec2 v_uv3;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_uv1 = a_uv1;
    v_uv2 = a_uv2;
    v_uv3 = a_uv3;
    
    gl_Position = pos;
  }
}%

// by caogtaa
CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec2 v_uv0;
  in vec2 v_uv1;
  in vec2 v_uv2;
  in vec2 v_uv3;

  uniform sampler2D texture;

  void main()
  {
    vec2 uv = v_uv0.xy;
    float tx = cc_time.x * v_uv1.x;
    float ty = cc_time.x * v_uv1.y;

    vec2 xpq = v_uv2.xy;
    vec2 ypq = v_uv3.xy;

    uv.x = uv.x * xpq.x + xpq.y;
    uv.y = uv.y * ypq.x + ypq.y;

    uv.x = fract(uv.x - tx);
    uv.y = fract(uv.y - ty);

    uv.x = (uv.x - xpq.y) / xpq.x;
    uv.y = (uv.y - ypq.y) / ypq.x;

    vec4 col = texture(texture, uv);
    gl_FragColor = col;
  }
}%
