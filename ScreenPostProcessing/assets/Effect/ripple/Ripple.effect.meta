{
  "ver": "1.0.27",
  "uuid": "16f532fa-78a9-48c7-add0-f688b89168da",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 _WaveInfo[10];\nuniform vec2 _Resolution;\nuniform float _WaveWidth;\nuniform float _WaveLength;\nuniform float _WaveSpeed;\nuniform float _WaveStrength;\nuniform float _WaveStrengthFallFactor;\nvoid main () {\n  float u_time = cc_time.x;\n  vec2 uv = v_uv0;\n  for (int i = 0; i < 10; ++i)\n  {\n    if (_WaveInfo[i].w < 0.5) continue;\n    vec2 center = _WaveInfo[i].xy;\n    float curWaveDistance = _WaveInfo[i].z;\n    vec2 offset = uv - center;\n    offset *= vec2(_Resolution.x / _Resolution.y, 1.0) * 4.0;\n    float dist = length(offset);\n    vec2 offsetDir = normalize(offset);\n    float curWaveWidth = _WaveWidth * (1.0 + dist);\n    float discardFactor = step(abs(dist - curWaveDistance), curWaveWidth);\n    float offsetFactor = sin(u_time * _WaveSpeed + dist * _WaveLength);\n    float curWaveStrength = _WaveStrength * (1.0 / dist * _WaveStrengthFallFactor);\n    uv += curWaveStrength * offsetDir * offsetFactor * discardFactor;\n  }\n  vec3 n = vec3(uv, sqrt(1.0 - dot(uv, uv)));\n  float colorGloss = 5.0 * pow(clamp(dot(n / 10.0, normalize(vec3 (1.0, 0.7, 0.5))), 0.0, 1.0), 6.0);\n  vec4 o = texture2D(texture, uv);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  vec4 _WaveInfo[10];\n  vec2 _Resolution;\n  float _WaveWidth;\n  float _WaveLength;\n  float _WaveSpeed;\n  float _WaveStrength;\n  float _WaveStrengthFallFactor;\n};\nvoid main () {\n  float u_time = cc_time.x;\n  vec2 uv = v_uv0;\n  for (int i = 0; i < 10; ++i)\n  {\n    if (_WaveInfo[i].w < 0.5) continue;\n    vec2 center = _WaveInfo[i].xy;\n    float curWaveDistance = _WaveInfo[i].z;\n    vec2 offset = uv - center;\n    offset *= vec2(_Resolution.x / _Resolution.y, 1.0) * 4.0;\n    float dist = length(offset);\n    vec2 offsetDir = normalize(offset);\n    float curWaveWidth = _WaveWidth * (1.0 + dist);\n    float discardFactor = step(abs(dist - curWaveDistance), curWaveWidth);\n    float offsetFactor = sin(u_time * _WaveSpeed + dist * _WaveLength);\n    float curWaveStrength = _WaveStrength * (1.0 / dist * _WaveStrengthFallFactor);\n    uv += curWaveStrength * offsetDir * offsetFactor * discardFactor;\n  }\n  vec3 n = vec3(uv, sqrt(1.0 - dot(uv, uv)));\n  float colorGloss = 5.0 * pow(clamp(dot(n / 10.0, normalize(vec3 (1.0, 0.7, 0.5))), 0.0, 1.0), 6.0);\n  vec4 o = texture(texture, uv);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}