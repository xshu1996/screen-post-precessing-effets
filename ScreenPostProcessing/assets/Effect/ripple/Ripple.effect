// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #define MAX_RADIUS 1
  #define DOUBLE_HASH 0
  #define HASHSCALE1 0.1031
  #define HASHSCALE3 vec3(0.1031, 0.1030, 0.0973)

  float hash12 (vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * HASHSCALE1);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
  }

  vec2 hash22 (vec2 p) {
    vec3 p3 = fract (vec3 (p.xyx) * HASHSCALE3);
    p3 += dot (p3, p3.yzx + 19.19);
    return fract ((p3.xx + p3.yz) * p3.zy);
  }

  uniform Constant {
    vec4 _WaveInfo[10]; // x,y,distance
    vec2 _Resolution;
    float _WaveWidth;
    float _WaveLength;
    float _WaveSpeed;
    float _WaveStrength;
    float _WaveStrengthFallFactor;
  };


  void main () {

    float u_time = cc_time.x;
    vec2 uv = v_uv0;
    
    for (int i = 0; i < 10; ++i)
    {
      if (_WaveInfo[i].w < 0.5) continue;
      vec2 center = _WaveInfo[i].xy;
      float curWaveDistance = _WaveInfo[i].z;
      vec2 offset = uv - center;

      offset *= vec2(_Resolution.x / _Resolution.y, 1.0) * 4.0;

      float dist = length(offset);
      vec2 offsetDir = normalize(offset);
      float curWaveWidth = _WaveWidth * (1.0 + dist);
      float discardFactor = step(abs(dist - curWaveDistance), curWaveWidth);
      float offsetFactor = sin(u_time * _WaveSpeed + dist * _WaveLength);
      float curWaveStrength = _WaveStrength * (1.0 / dist * _WaveStrengthFallFactor);
      uv += curWaveStrength * offsetDir * offsetFactor * discardFactor;
    }
    vec3 n = vec3(uv, sqrt(1.0 - dot(uv, uv)));
    float colorGloss = 5.0 * pow(clamp(dot(n / 10.0, normalize(vec3 (1.0, 0.7, 0.5))), 0.0, 1.0), 6.0);
    vec4 o = texture(texture, uv);
    // o.rgb += vec3(colorGloss);
    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
