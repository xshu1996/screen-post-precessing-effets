// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  float randomNoise2(vec2 seed)
  {
    float speed = 10.0;
    return fract(sin(dot(seed * floor(cc_time.x * speed), vec2(17.13, 3.71))) * 43758.5453123);
  }

  float randomNoise(float x, float y)
  {
    return fract(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    float time = cc_time.x;

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    // normal RGB Split Glitch
    // float intensity = 8.0;
    // float splitAmount = intensity * randomNoise(time, 2.0);
    // vec4 ColorR = texture(texture, vec2(v_uv0.x + splitAmount, v_uv0.y));
    // vec4 ColorG = texture(texture, v_uv0);
    // vec4 ColorB = texture(texture, vec2(v_uv0.x - splitAmount, v_uv0.y));
    // o = vec4(ColorR.r, ColorG.g, ColorB.b, ColorR.a + ColorB.a + ColorG.a);

    // better RGB Split Glitch
    // float splitAmount = (1.0 + sin(time * 6.0)) * 0.5;
    // splitAmount *= 1.0 + sin(time * 16.0) * 0.5;
    // splitAmount *= 1.0 + sin(time * 19.0) * 0.5;
    // splitAmount *= 1.0 + sin(time * 27.0) * 0.5;
    // splitAmount = pow(splitAmount, 4.9);
    // splitAmount *= (0.05 * 13.9);

    // vec2 offset = vec2(splitAmount);
    // vec4 driftColor0 = texture(texture, v_uv0 + offset);
    // vec4 driftColor1 = texture(texture, v_uv0 - offset);

    // o = vec4(driftColor0.r, o.g, driftColor1.b, o.a);
    // o *= (1.0 - splitAmount * 0.5);

    // 错位图块故障（Image Block Glitch）
    float block = randomNoise2(floor(v_uv0 * 8.0));
    float displaceNoise = pow(block, 8.0) * pow(block, 3.0);
    float splitRGBNoise = pow(randomNoise2(vec2(7.2341, 1.0)), 17.0);
    float offsetX = displaceNoise - splitRGBNoise * 1.0; 
    float offsetY = displaceNoise - splitRGBNoise * 1.0;

    float noiseX = 0.05 * randomNoise2(vec2(13.0, 1.0));
    float noiseY = 0.05 * randomNoise2(vec2(7.0, 1.0));
    vec2 offset = vec2(offsetX * noiseX, offsetY * noiseY);

    vec4 driftColor0 = texture(texture, v_uv0 + offset);
    vec4 driftColor1 = texture(texture, v_uv0 - offset);

    o = vec4(driftColor0.r, o.g, driftColor1.b, o.a + driftColor0.a + driftColor1.a);

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
