// 参考毛星云大神 Unity 后效： https://github.com/QianMo/X-PostProcessing-Library

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        stripNoiseTex: { value: white }
        alphaThreshold: { value: 0.5 }
        UVoffset: { value: [0.0, 0.0, 1.0, 1.0] }
        rotated: { value: 0.0 }
        intensity: { value: 0.451 }
        stripColorAdjustColor: { value: [0.662, 0.654, 0.651, 1.000], inspector: { type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_STRIP_NOISE_TEXTURE
  uniform sampler2D stripNoiseTex;
  uniform stripParam {
    vec4 stripColorAdjustColor;
  };
  #endif

  uniform Constant {
    vec4 UVoffset;
    float rotated;
    float intensity;
  };

  float randomNoise2(vec2 seed)
  {
    float speed = 10.0;
    return fract(sin(dot(seed * floor(cc_time.x * speed), vec2(17.13, 3.71))) * 43758.5453123);
  }

  float randomNoise(float x, float y)
  {
    return fract(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453);
  }

  float trunc(float x, float num_levels)
	{
		return floor(x * num_levels) / num_levels;
	}
	
	vec2 trunc2(vec2 x, vec2 num_levels)
	{
		return floor(x * num_levels) / num_levels;
	}
	
	vec3 rgb2yuv(vec3 rgb)
	{
		vec3 yuv;
		yuv.x = dot(rgb, vec3(0.299, 0.587, 0.114));
		yuv.y = dot(rgb, vec3(-0.14713, -0.28886, 0.436));
		yuv.z = dot(rgb, vec3(0.615, -0.51499, -0.10001));
		return yuv;
	}
	
	vec3 yuv2rgb(vec3 yuv)
	{
		vec3 rgb;
		rgb.r = yuv.x + yuv.z * 1.13983;
		rgb.g = yuv.x + dot(vec2(-0.39465, -0.58060), yuv.yz);
		rgb.b = yuv.x + yuv.y * 2.03211;
		return rgb;
	}
  // normal RGB Split Glitch
  vec4 normalGlith(vec2 uv) {
    vec4 o = texture(texture, uv);
    float intensity = 8.0;
    float splitAmount = intensity * randomNoise(time, 2.0);
    vec4 ColorR = texture(texture, vec2(uv.x + splitAmount, uv.y));
    vec4 ColorG = texture(texture, uv);
    vec4 ColorB = texture(texture, vec2(uv.x - splitAmount, uv.y));
    o = vec4(ColorR.r, ColorG.g, ColorB.b, ColorR.a + ColorB.a + ColorG.a);

    // better RGB Split Glitch
    float splitAmount = (1.0 + sin(time * 6.0)) * 0.5;
    splitAmount *= 1.0 + sin(time * 16.0) * 0.5;
    splitAmount *= 1.0 + sin(time * 19.0) * 0.5;
    splitAmount *= 1.0 + sin(time * 27.0) * 0.5;
    splitAmount = pow(splitAmount, 4.9);
    splitAmount *= (0.05 * 13.9);

    vec2 offset = vec2(splitAmount);
    vec4 driftColor0 = texture(texture, uv + offset);
    vec4 driftColor1 = texture(texture, uv - offset);

    o = vec4(driftColor0.r, o.g, driftColor1.b, o.a + driftColor0.a + driftColor1.a);
    return o;
  }

  // 错位图块故障（Image Block Glitch）
  vec4 imageBlockGlitch(vec2 uv) {
    vec4 o = texture(texture, uv);
    float block = randomNoise2(floor(uv * 8.0));
    float displaceNoise = pow(block, 8.0) * pow(block, 3.0);
    float splitRGBNoise = pow(randomNoise2(vec2(7.2341, 1.0)), 17.0);
    float offsetX = displaceNoise - splitRGBNoise * 1.0; 
    float offsetY = displaceNoise - splitRGBNoise * 1.0;

    float noiseX = 0.05 * randomNoise2(vec2(13.0, 1.0));
    float noiseY = 0.05 * randomNoise2(vec2(7.0, 1.0));
    vec2 offset = vec2(offsetX * noiseX, offsetY * noiseY);

    vec4 driftColor0 = texture(texture, uv + offset);
    vec4 driftColor1 = texture(texture, uv - offset);

    o = vec4(driftColor0.r, o.g, driftColor1.b, o.a + driftColor0.a + driftColor1.a);
    return o;
  }
  // 错位线条故障 (line block glitch)
  vec4 lineBlockGlitchVertical(vec2 uv) {
		// uniform
    float _LinesWidth = 1.0;
    float _Amount = 0.5;
    float _Speed = 1.0;
    float _Offset = 1.0;
    float _Alpha = 1.0;

		float strength = 10.0;
		float _TimeX = cc_time.x;
    strength = 0.5 + 0.5 * cos(_TimeX * 100.0);
    _TimeX *= strength;
		
		// [1] 生成随机均匀宽度线条
		float truncTime = trunc(_TimeX, 4.0);
		float uv_trunc = randomNoise2(trunc2(vec2(uv.x), vec2(8.0, 8.0)) + 100.0 * truncTime);
		float uv_randomTrunc = 6.0 * trunc(_TimeX, 24.0 * uv_trunc);
		
		// [2] 生成随机非均匀宽度线条 | Generate Random inhomogeneous Block Line
		float blockLine_random = 0.5 * randomNoise2(trunc2(vec2(uv.x) + uv_randomTrunc, vec2(8.0 * _LinesWidth, 8.0 * _LinesWidth)));
		blockLine_random += 0.5 * randomNoise2(trunc2(vec2(uv.x) + uv_randomTrunc, vec2(7.0, 7.0)));
		blockLine_random = blockLine_random * 2.0 - 1.0;
		blockLine_random = sign(blockLine_random) * clamp((abs(blockLine_random) - _Amount) / (0.4), 0.0, 1.0);
		blockLine_random = mix(0.0, blockLine_random, _Offset);
		
		// [3] 生成源色调的blockLine Glitch
		vec2 uv_blockLine = uv;
		uv_blockLine = clamp(uv_blockLine + vec2(0, 0.1 * blockLine_random), vec2(0.), vec2(1.));
		vec4 blockLineColor = texture(texture, abs(uv_blockLine));
		
		// [4] 将RGB转到YUV空间，并做色调偏移
		// RGB -> YUV
		vec3 blockLineColor_yuv = rgb2yuv(blockLineColor.rgb);
		// adjust Chrominance | 色度
		blockLineColor_yuv.y /= 1.0 - 3.0 * abs(blockLine_random) * clamp(0.5 - blockLine_random, 0.0, 1.0);
		// adjust Chroma | 浓度
		blockLineColor_yuv.z += 0.125 * blockLine_random * clamp(blockLine_random - 0.5, 0.0, 1.0);
		vec3 blockLineColor_rgb = yuv2rgb(blockLineColor_yuv);
		
		// [5] 与源场景图进行混合
		vec4 sceneColor = texture(texture, uv);
		return mix(sceneColor, vec4(blockLineColor_rgb, blockLineColor.a), _Alpha);
  }

  vec4 lineBlockGlitchHorizontal(vec2 uv) {
		// uniform
    float _LinesWidth = 1.0;
    float _Amount = 0.5;
    float _Speed = 1.0;
    float _Offset = 1.0;
    float _Alpha = 1.0;

		float strength = 10.0;
		float _TimeX = cc_time.x;
    strength = 0.5 + 0.5 * cos(_TimeX * 100.0);
    _TimeX *= strength;
		
		// [1] 生成随机均匀宽度线条
		float truncTime = trunc(_TimeX, 4.0);
		float uv_trunc = randomNoise2(trunc2(vec2(uv.y), vec2(8.0, 8.0)) + 100.0 * truncTime);
		float uv_randomTrunc = 6.0 * trunc(_TimeX, 24.0 * uv_trunc);
		
		// [2] 生成随机非均匀宽度线条 | Generate Random inhomogeneous Block Line
		float blockLine_random = 0.5 * randomNoise2(trunc2(vec2(uv.y) + uv_randomTrunc, vec2(8.0 * _LinesWidth, 8.0 * _LinesWidth)));
		blockLine_random += 0.5 * randomNoise2(trunc2(vec2(uv.y) + uv_randomTrunc, vec2(7.0, 7.0)));
		blockLine_random = blockLine_random * 2.0 - 1.0;
		blockLine_random = sign(blockLine_random) * clamp((abs(blockLine_random) - _Amount) / (0.4), 0.0, 1.0);
		blockLine_random = mix(0.0, blockLine_random, _Offset);
		
		// [3] 生成源色调的blockLine Glitch
		vec2 uv_blockLine = uv;
		uv_blockLine = clamp(uv_blockLine + vec2(0, 0.1 * blockLine_random), vec2(0.), vec2(1.));
		vec4 blockLineColor = texture(texture, abs(uv_blockLine));
		
		// [4] 将RGB转到YUV空间，并做色调偏移
		// RGB -> YUV
		vec3 blockLineColor_yuv = rgb2yuv(blockLineColor.rgb);
		// adjust Chrominance | 色度
		blockLineColor_yuv.y /= 1.0 - 3.0 * abs(blockLine_random) * clamp(0.5 - blockLine_random, 0.0, 1.0);
		// adjust Chroma | 浓度
		blockLineColor_yuv.z += 0.125 * blockLine_random * clamp(blockLine_random - 0.5, 0.0, 1.0);
		vec3 blockLineColor_rgb = yuv2rgb(blockLineColor_yuv);
		
		// [5] 与源场景图进行混合
		vec4 sceneColor = texture(texture, uv);
		return mix(sceneColor, vec4(blockLineColor_rgb, blockLineColor.a), _Alpha);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    float time = cc_time.x;
    // v_uv0 归一化
    vec2 normalizedUV;
    normalizedUV.x = (v_uv0.x - UVoffset.x) / (UVoffset.z - UVoffset.x);
    normalizedUV.y = (v_uv0.y - UVoffset.y) / (UVoffset.w - UVoffset.y);
    if (rotated > 0.5) {
      float temp = normalizedUV.x;
      normalizedUV.x = normalizedUV.y;
      normalizedUV.y = 1.0 - temp;
    }

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    #if USE_STRIP_NOISE_TEXTURE
      // 数字条纹故障
      vec2 uv = normalizedUV;
      vec4 stripNoise = texture(stripNoiseTex, uv);
      float threshold = 1.001 - intensity * 1.001;

      // uv偏移
      float uvShift = step(threshold, pow(abs(stripNoise.x), 3.0));
      uv = fract(uv + stripNoise.yz * uvShift);
      vec4 source = texture(texture, uv);

      float stripIntensity = step(threshold, pow(abs(stripNoise.w), 3.0)) * 2.0;
      vec3 color = mix(source, stripColorAdjustColor, stripIntensity).rgb;
      o = vec4(color, source.a);
      o = source;
    #else
      o = lineBlockGlitchHorizontal(normalizedUV);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
