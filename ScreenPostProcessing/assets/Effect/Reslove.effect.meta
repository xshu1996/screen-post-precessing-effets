{
  "ver": "1.0.27",
  "uuid": "684cc59d-d1d2-470e-9f50-3019beb8b207",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_NOISE_TEXTURE\nuniform sampler2D noiseTex;\n#endif\n#if USE_FIXED_POINT\nuniform vec2 u_startPoint;\nuniform float u_disEffect;\n#endif\nuniform vec4 u_burnColInner;\nuniform vec4 u_burnColOuter;\nuniform float u_edgetWidth;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec4 nc = vec4(1.0);\n  #if USE_NOISE_TEXTURE\n    nc = texture2D(noiseTex, v_uv0);\n  #endif\n  float delta = 1.0;\n  #if USE_FIXED_POINT\n    float dis = distance(u_startPoint, v_uv0);\n    vec4 noiseColor = texture2D(noiseTex, v_uv0);\n    float cutout = noiseColor.r * dis * (1.0 - u_disEffect) + dis * u_disEffect;\n    float speed = 1.0;\n    float threshold = abs(1.0 - sin(cc_time.x * speed));\n    delta = cutout - threshold;\n  #else\n    float noiseThreshold = fract(cc_time.x / 5.0);\n    delta = nc.r - noiseThreshold;\n  #endif\n  float t = smoothstep(0.0, u_edgetWidth, delta);\n  vec3 burnColor = mix(u_burnColOuter.rgb, u_burnColInner.rgb, t);\n  o.rgb = mix(burnColor.rgb, o.rgb, t);\n  o.a *= step(0.0, delta);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_NOISE_TEXTURE\nuniform sampler2D noiseTex;\n#endif\n#if USE_FIXED_POINT\nuniform u_fixedPoint\n{\n  vec2 u_startPoint;\n  float u_disEffect;\n};\n#endif\nuniform u_constant\n{\n  vec4 u_burnColInner;\n  vec4 u_burnColOuter;\n  float u_edgetWidth;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec4 nc = vec4(1.0);\n  #if USE_NOISE_TEXTURE\n    nc = texture2D(noiseTex, v_uv0);\n  #endif\n  float delta = 1.0;\n  #if USE_FIXED_POINT\n    float dis = distance(u_startPoint, v_uv0);\n    vec4 noiseColor = texture2D(noiseTex, v_uv0);\n    float cutout = noiseColor.r * dis * (1.0 - u_disEffect) + dis * u_disEffect;\n    float speed = 1.0;\n    float threshold = abs(1.0 - sin(cc_time.x * speed));\n    delta = cutout - threshold;\n  #else\n    float noiseThreshold = fract(cc_time.x / 5.0);\n    delta = nc.r - noiseThreshold;\n  #endif\n  float t = smoothstep(0.0, u_edgetWidth, delta);\n  vec3 burnColor = mix(u_burnColOuter.rgb, u_burnColInner.rgb, t);\n  o.rgb = mix(burnColor.rgb, o.rgb, t);\n  o.a *= step(0.0, delta);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}