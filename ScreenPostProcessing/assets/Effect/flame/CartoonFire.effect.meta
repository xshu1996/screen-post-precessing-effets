{
  "ver": "1.0.27",
  "uuid": "1b631e82-a236-4b21-a13b-bc4031bc483a",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 innerColorBase;\nuniform vec4 outerColorBase;\nuniform vec2 speed;\nfloat random (vec2 st) {\n  return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453123);\n}\nfloat noise (vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nvoid main () {\n  vec4 mask_color = vec4(1, 1, 1, 1);\n  float time = cc_time.x;\n  float offer = time * speed.x;\n  vec2 noiseSt = (0.2 * v_uv0 + offer * vec2(0.0, 0.5)) * 80.0;\n  vec2 noiseSt2 = (0.2 * v_uv0 + offer * vec2(0.0, 1.0)) * 80.0;\n  float noiseC = noise(noiseSt);\n  float noiseC2 = noise(noiseSt2);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    mask_color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    mask_color.a *= texture_tmp.a;\n  #else\n    mask_color *= texture_tmp;\n  #endif\n  #endif\n  float dp = pow((noiseC + noiseC2), 5.54);\n  float uvy = v_uv0.y;\n  float c = ((mask_color.b * 3.0) + ((v_color.a * dp * 80.0 * mask_color.r) * (mask_color.g * uvy))) * uvy;\n  float finalAlpha = step(clamp(1.5 - uvy , 0.0, 1.0), c);\n  float c2 = c * pow(mask_color.g * uvy, 4.93);\n  float c3 = step(0.36, c2);\n  float c4 = 1.0 - c3;\n  vec3 emissive = (c3 * innerColorBase.rgb + c4 * outerColorBase.rgb) * 4.61;\n  vec4 finalColor = vec4(emissive, finalAlpha);\n  ALPHA_TEST(finalColor);\n  #if USE_BGRA\n    gl_FragColor = finalColor.bgra;\n  #else\n    gl_FragColor = finalColor.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform u_constant {\n  vec4 innerColorBase;\n  vec4 outerColorBase;\n  vec2 speed;\n};\nfloat random (vec2 st) {\n  return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453123);\n}\nfloat noise (vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nvoid main () {\n  vec4 mask_color = vec4(1, 1, 1, 1);\n  float time = cc_time.x;\n  float offer = time * speed.x;\n  vec2 noiseSt = (0.2 * v_uv0 + offer * vec2(0.0, 0.5)) * 80.0;\n  vec2 noiseSt2 = (0.2 * v_uv0 + offer * vec2(0.0, 1.0)) * 80.0;\n  float noiseC = noise(noiseSt);\n  float noiseC2 = noise(noiseSt2);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    mask_color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    mask_color.a *= texture_tmp.a;\n  #else\n    mask_color *= texture_tmp;\n  #endif\n  #endif\n  float dp = pow((noiseC + noiseC2), 5.54);\n  float uvy = v_uv0.y;\n  float c = ((mask_color.b * 3.0) + ((v_color.a * dp * 80.0 * mask_color.r) * (mask_color.g * uvy))) * uvy;\n  float finalAlpha = step(clamp(1.5 - uvy , 0.0, 1.0), c);\n  float c2 = c * pow(mask_color.g * uvy, 4.93);\n  float c3 = step(0.36, c2);\n  float c4 = 1.0 - c3;\n  vec3 emissive = (c3 * innerColorBase.rgb + c4 * outerColorBase.rgb) * 4.61;\n  vec4 finalColor = vec4(emissive, finalAlpha);\n  ALPHA_TEST(finalColor);\n  #if USE_BGRA\n    gl_FragColor = finalColor.bgra;\n  #else\n    gl_FragColor = finalColor.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}