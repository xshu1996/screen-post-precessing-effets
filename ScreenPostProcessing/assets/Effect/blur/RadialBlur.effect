// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        uv_offset: { value: [0.0, 0.0, 1.0, 1.0], editor: { visible: false } }
        intensity: { value: 1.0 }
        center: { value: [0.5, 0.5] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #define _LOOP 10.0

  uniform Constant
  {
    vec4 uv_offset;
    vec2 center;
    float intensity;
    float is_rotated;
  };

  // 把图集内的图片的 uv 坐标换算映射到 0.0 ～ 1.0 或者反之
  float linear(float x0, float x1, float y0, float y1, float inputX) 
  {
     return (y1 - y0) * (inputX - x0) / (x1 - x0) + y0;
  }

  // 映射uv到 0~1
  vec2 normalizedUV(vec2 uv)
  {
    vec2 UVnormalize;
    UVnormalize.x = (uv.x - uv_offset.x) / (uv_offset.z - uv_offset.x);
    UVnormalize.y = (uv.y - uv_offset.y) / (uv_offset.w - uv_offset.y);
    if (is_rotated > 0.5)
    {
      float temp = UVnormalize.x;
      UVnormalize.x = UVnormalize.y;
      UVnormalize.y = 1.0 - temp;
    }
    return UVnormalize;
  }

  // 将0~1的uv还原到合图uv
  vec2 recoverUv(vec2 uv)
  {
    uv = clamp(uv, 0.0, 1.0);
    uv = vec2(
      uv.x * (uv_offset.z - uv_offset.x) + uv_offset.x,
      uv.y * (uv_offset.w - uv_offset.y) + uv_offset.y
    );
    if (is_rotated > 0.5)
    {
        float tmp = 1.0 - uv.x;
        uv.x = 1.0 - uv.y;
        uv.y = 1.0 - tmp;
    }
    return uv;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 uv = normalizedUV(v_uv0);

    #if USE_TEXTURE
      vec4 sum = vec4(0.0);
      vec2 dir = (center - uv) * intensity * 0.01;
      for (float i = 0.0; i < _LOOP; ++i)
      {
        // uv 需要映射到原先的
        sum += texture2D(texture, recoverUv(uv + dir * i));
      }
      o = sum / _LOOP;
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
