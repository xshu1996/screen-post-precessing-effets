{
  "ver": "1.0.27",
  "uuid": "ae122e5e-b6cc-4596-a427-97b39a11b1a6",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 uv_offset;\nuniform vec2 center;\nuniform float intensity;\nuniform float is_rotated;\nvec2 normalizedUV(vec2 uv)\n{\n  vec2 UVnormalize;\n  UVnormalize.x = (uv.x - uv_offset.x) / (uv_offset.z - uv_offset.x);\n  UVnormalize.y = (uv.y - uv_offset.y) / (uv_offset.w - uv_offset.y);\n  if (is_rotated > 0.5)\n  {\n    float temp = UVnormalize.x;\n    UVnormalize.x = UVnormalize.y;\n    UVnormalize.y = 1.0 - temp;\n  }\n  return UVnormalize;\n}\nvec2 recoverUv(vec2 uv)\n{\n  uv = clamp(uv, 0.0, 1.0);\n  uv = vec2(\n    uv.x * (uv_offset.z - uv_offset.x) + uv_offset.x,\n    uv.y * (uv_offset.w - uv_offset.y) + uv_offset.y\n  );\n  if (is_rotated > 0.5)\n  {\n      float tmp = 1.0 - uv.x;\n      uv.x = 1.0 - uv.y;\n      uv.y = 1.0 - tmp;\n  }\n  return uv;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = normalizedUV(v_uv0);\n  #if USE_TEXTURE\n    vec4 sum = vec4(0.0);\n    vec2 dir = (center - uv) * intensity * 0.01;\n    for (float i = 0.0; i < 10.0; ++i)\n    {\n      sum += texture2D(texture, recoverUv(uv + dir * i));\n    }\n    o = sum / 10.0;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant\n{\n  vec4 uv_offset;\n  vec2 center;\n  float intensity;\n  float is_rotated;\n};\nvec2 normalizedUV(vec2 uv)\n{\n  vec2 UVnormalize;\n  UVnormalize.x = (uv.x - uv_offset.x) / (uv_offset.z - uv_offset.x);\n  UVnormalize.y = (uv.y - uv_offset.y) / (uv_offset.w - uv_offset.y);\n  if (is_rotated > 0.5)\n  {\n    float temp = UVnormalize.x;\n    UVnormalize.x = UVnormalize.y;\n    UVnormalize.y = 1.0 - temp;\n  }\n  return UVnormalize;\n}\nvec2 recoverUv(vec2 uv)\n{\n  uv = clamp(uv, 0.0, 1.0);\n  uv = vec2(\n    uv.x * (uv_offset.z - uv_offset.x) + uv_offset.x,\n    uv.y * (uv_offset.w - uv_offset.y) + uv_offset.y\n  );\n  if (is_rotated > 0.5)\n  {\n      float tmp = 1.0 - uv.x;\n      uv.x = 1.0 - uv.y;\n      uv.y = 1.0 - tmp;\n  }\n  return uv;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = normalizedUV(v_uv0);\n  #if USE_TEXTURE\n    vec4 sum = vec4(0.0);\n    vec2 dir = (center - uv) * intensity * 0.01;\n    for (float i = 0.0; i < 10.0; ++i)\n    {\n      sum += texture2D(texture, recoverUv(uv + dir * i));\n    }\n    o = sum / 10.0;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}