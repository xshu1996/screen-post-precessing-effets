// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        cloudScale: { value: 1.1 }
        speed: { value: 0.03 }
        cloudDark: { value: 0.5 }
        cloudLight: { value: 0.3 }
        cloudCover: { value: 0.2 }
        cloudAlpha: { value: 8.0 }
        skyTint: { value: 0.5 }
        skyColour1: { value: [0.2, 0.4, 0.6, 1.0], inspector: { type: color } }
        skyColour2: { value: [0.4, 0.7, 1.0, 1.0], inspector: { type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Constant {
    vec4 skyColour1;
    vec4 skyColour2;
    float cloudScale;
    float speed;
    float cloudDark;
    float cloudLight;
    float cloudCover;
    float cloudAlpha;
    float skyTint;
  };
  const mat2 m = mat2(1.6, 1.2, -1.2, 1.6);

  vec2 hash( vec2 p ) {
    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))); 
    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
  }

  float noise( vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3.0) - 1.0) / 2.0;
    const float K2 = 0.211324865; // (3.0 - sqrt(3.0)) / 6.0;
    vec2 i = floor(p + (p.x + p.y) * K1);	
    vec2 a = p - i + (i.x + i.y) * K2;
    vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0 * K2;
    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c) ), 0.0);
    vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));
    return dot(n, vec3(70.0));
  }

  float fbm( vec2 n ) {
    float total = 0.0, amplitude = 0.1;
    for (int i = 0; i < 7; i++) {
      total += noise(n) * amplitude;
      n = m * n;
      amplitude *= 0.4;
    }
    return total;
  }

  vec4 genCloud(vec2 uv) {
    vec2 o_uv = uv;
    float time = cc_time.x * speed;
    float q = fbm(uv * cloudScale * 0.5);
    
    //ridged noise shape
    float r = 0.0;
    uv *= cloudScale;
    uv -= q - time;
    float weight = 0.8;
    for (int i = 0; i < 8; i++) {
      r += abs(weight * noise(uv));
      uv = m * uv + time;
		  weight *= 0.7;
    }
    
    //noise shape
    float f = 0.0;
    uv = o_uv;
    uv *= cloudScale;
    uv -= q - time;
    weight = 0.7;
    for (int i = 0; i < 8; i++) {
      f += weight * noise(uv);
      uv = m * uv + time;
      weight *= 0.6;
    }
    
    f *= r + f;
    
    //noise colour
    float c = 0.0;
    time = cc_time.x * speed * 2.0;
    uv = o_uv;
    uv *= cloudScale * 2.0;
    uv -= q - time;
    weight = 0.4;
    for (int i = 0; i < 7; i++) {
      c += weight * noise(uv);
      uv = m * uv + time;
		  weight *= 0.6;
    }
    
    //noise ridge colour
    float c1 = 0.0;
    time = cc_time.x * speed * 3.0;
    uv = o_uv;
    uv *= cloudScale * 3.0;
    uv -= q - time;
    weight = 0.4;
    for (int i = 0; i < 7; i++) {
      c1 += abs(weight * noise(uv));
      uv = m * uv + time;
		  weight *= 0.6;
    }
	
    c += c1;
    
    vec3 skycolour = mix(skyColour2, skyColour1, o_uv.y).rgb;
    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((cloudDark + cloudLight * c), 0.0, 1.0);

    f = cloudCover + cloudAlpha * f * r;
    
    vec3 result = mix(skycolour, clamp(skyTint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));

    return vec4(result, 1.0);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    o = genCloud(v_uv0);

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
