{
  "ver": "1.0.27",
  "uuid": "93c6fd4a-701c-427b-8b40-f0d3bf7fac4d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 skyColour1;\nuniform vec4 skyColour2;\nuniform float cloudScale;\nuniform float speed;\nuniform float cloudDark;\nuniform float cloudLight;\nuniform float cloudCover;\nuniform float cloudAlpha;\nuniform float skyTint;\nconst mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\nvec2 hash( vec2 p ) {\n  p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n  return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\nfloat noise( vec2 p ) {\n  const float K1 = 0.366025404;\n  const float K2 = 0.211324865;\n  vec2 i = floor(p + (p.x + p.y) * K1);\n  vec2 a = p - i + (i.x + i.y) * K2;\n  vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec2 b = a - o + K2;\n  vec2 c = a - 1.0 + 2.0 * K2;\n  vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c) ), 0.0);\n  vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n  return dot(n, vec3(70.0));\n}\nfloat fbm( vec2 n ) {\n  float total = 0.0, amplitude = 0.1;\n  for (int i = 0; i < 7; i++) {\n    total += noise(n) * amplitude;\n    n = m * n;\n    amplitude *= 0.4;\n  }\n  return total;\n}\nvec4 genCloud(vec2 uv) {\n  vec2 o_uv = uv;\n  float time = cc_time.x * speed;\n  float q = fbm(uv * cloudScale * 0.5);\n  float r = 0.0;\n  uv *= cloudScale;\n  uv -= q - time;\n  float weight = 0.8;\n  for (int i = 0; i < 8; i++) {\n    r += abs(weight * noise(uv));\n    uv = m * uv + time;\n    weight *= 0.7;\n  }\n  float f = 0.0;\n  uv = o_uv;\n  uv *= cloudScale;\n  uv -= q - time;\n  weight = 0.7;\n  for (int i = 0; i < 8; i++) {\n    f += weight * noise(uv);\n    uv = m * uv + time;\n    weight *= 0.6;\n  }\n  f *= r + f;\n  float c = 0.0;\n  time = cc_time.x * speed * 2.0;\n  uv = o_uv;\n  uv *= cloudScale * 2.0;\n  uv -= q - time;\n  weight = 0.4;\n  for (int i = 0; i < 7; i++) {\n    c += weight * noise(uv);\n    uv = m * uv + time;\n    weight *= 0.6;\n  }\n  float c1 = 0.0;\n  time = cc_time.x * speed * 3.0;\n  uv = o_uv;\n  uv *= cloudScale * 3.0;\n  uv -= q - time;\n  weight = 0.4;\n  for (int i = 0; i < 7; i++) {\n    c1 += abs(weight * noise(uv));\n    uv = m * uv + time;\n    weight *= 0.6;\n  }\n  c += c1;\n  vec3 skycolour = mix(skyColour2, skyColour1, o_uv.y).rgb;\n  vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((cloudDark + cloudLight * c), 0.0, 1.0);\n  f = cloudCover + cloudAlpha * f * r;\n  vec3 result = mix(skycolour, clamp(skyTint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n  return vec4(result, 1.0);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o = genCloud(v_uv0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  vec4 skyColour1;\n  vec4 skyColour2;\n  float cloudScale;\n  float speed;\n  float cloudDark;\n  float cloudLight;\n  float cloudCover;\n  float cloudAlpha;\n  float skyTint;\n};\nconst mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\nvec2 hash( vec2 p ) {\n  p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n  return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\nfloat noise( vec2 p ) {\n  const float K1 = 0.366025404;\n  const float K2 = 0.211324865;\n  vec2 i = floor(p + (p.x + p.y) * K1);\n  vec2 a = p - i + (i.x + i.y) * K2;\n  vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec2 b = a - o + K2;\n  vec2 c = a - 1.0 + 2.0 * K2;\n  vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c) ), 0.0);\n  vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n  return dot(n, vec3(70.0));\n}\nfloat fbm( vec2 n ) {\n  float total = 0.0, amplitude = 0.1;\n  for (int i = 0; i < 7; i++) {\n    total += noise(n) * amplitude;\n    n = m * n;\n    amplitude *= 0.4;\n  }\n  return total;\n}\nvec4 genCloud(vec2 uv) {\n  vec2 o_uv = uv;\n  float time = cc_time.x * speed;\n  float q = fbm(uv * cloudScale * 0.5);\n  float r = 0.0;\n  uv *= cloudScale;\n  uv -= q - time;\n  float weight = 0.8;\n  for (int i = 0; i < 8; i++) {\n    r += abs(weight * noise(uv));\n    uv = m * uv + time;\n    weight *= 0.7;\n  }\n  float f = 0.0;\n  uv = o_uv;\n  uv *= cloudScale;\n  uv -= q - time;\n  weight = 0.7;\n  for (int i = 0; i < 8; i++) {\n    f += weight * noise(uv);\n    uv = m * uv + time;\n    weight *= 0.6;\n  }\n  f *= r + f;\n  float c = 0.0;\n  time = cc_time.x * speed * 2.0;\n  uv = o_uv;\n  uv *= cloudScale * 2.0;\n  uv -= q - time;\n  weight = 0.4;\n  for (int i = 0; i < 7; i++) {\n    c += weight * noise(uv);\n    uv = m * uv + time;\n    weight *= 0.6;\n  }\n  float c1 = 0.0;\n  time = cc_time.x * speed * 3.0;\n  uv = o_uv;\n  uv *= cloudScale * 3.0;\n  uv -= q - time;\n  weight = 0.4;\n  for (int i = 0; i < 7; i++) {\n    c1 += abs(weight * noise(uv));\n    uv = m * uv + time;\n    weight *= 0.6;\n  }\n  c += c1;\n  vec3 skycolour = mix(skyColour2, skyColour1, o_uv.y).rgb;\n  vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((cloudDark + cloudLight * c), 0.0, 1.0);\n  f = cloudCover + cloudAlpha * f * r;\n  vec3 result = mix(skycolour, clamp(skyTint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n  return vec4(result, 1.0);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o = genCloud(v_uv0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}